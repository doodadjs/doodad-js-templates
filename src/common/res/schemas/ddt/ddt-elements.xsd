<?xml version="1.0" encoding="UTF-8"?>

<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema"
	xmlns="http://www.doodad-js.local/schemas/ddt"
	xmlns:c="http://www.doodad-js.local/schemas/common"
	xmlns:t="http://www.doodad-js.local/schemas/ddt"
	targetNamespace="http://www.doodad-js.local/schemas/ddt"
  version="1.0"
>

	<!--
	 doodad-js  -  Object-oriented programming framework
	 File: ddt-elements.xsd - DDT elements schema file
	 Project home: https://github.com/doodadjs/
	 Trunk: svn checkout svn://svn.code.sf.net/p/doodad-js/code/trunk doodad-js-code
	 Author: Claude Petit, Quebec city
	 Contact: doodadjs [at] gmail.com
	 Note: I'm still in alpha-beta stage, so expect to find some bugs or incomplete parts !
	 License: Apache V2
	
		Copyright 2015-2018 Claude Petit
	
		Licensed under the Apache License, Version 2.0 (the "License");
		you may not use this file except in compliance with the License.
		You may obtain a copy of the License at
	
			http://www.apache.org/licenses/LICENSE-2.0
	
		Unless required by applicable law or agreed to in writing, software
		distributed under the License is distributed on an "AS IS" BASIS,
		WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
		See the License for the specific language governing permissions and
		limitations under the License.
-->

  <xs:import namespace="http://www.doodad-js.local/schemas/common" schemaLocation="common_ddt.xsd" />
  <xs:import namespace="http://www.doodad-js.local/schemas/html5"	schemaLocation="../html5/html5_base.xsd"/>

  <xs:element name="modules">
    <xs:complexType>
      <xs:sequence minOccurs="1" maxOccurs="1">
        <xs:element name="options" form="qualified" minOccurs="0" maxOccurs="1">
          <xs:complexType>
            <xs:sequence minOccurs="0" maxOccurs="unbounded">
              <xs:element name="option" form="qualified" minOccurs="1" maxOccurs="unbounded" >
                <xs:complexType>
                  <xs:attribute name="module" type="xs:string" use="required" />
                  <xs:attribute name="key" type="xs:string" use="optional" />
                  <xs:attribute name="value" form="unqualified" type="xs:string" use="optional" />
                  <xs:attribute name="value" form="qualified" type="xs:string" use="optional" />
                </xs:complexType>
              </xs:element>
            </xs:sequence>
          </xs:complexType>
        </xs:element>
        <xs:element name="load" form="qualified" minOccurs="0" maxOccurs="unbounded">
          <xs:complexType>
            <xs:attribute name="module" type="xs:string" use="optional" />
            <xs:attribute name="path" type="xs:string" use="optional" />
            <xs:attribute name="optional" type="xs:boolean" use="optional" default="false" />
            <xs:attribute name="integrity" type="xs:string" use="optional" />
          </xs:complexType>
        </xs:element>
      </xs:sequence>
    </xs:complexType>
  </xs:element>

  <xs:element name="script">
		<xs:complexType>
			<xs:simpleContent>
				<xs:extension base="xs:string">
					<xs:attribute name="vars" type="xs:string"/>
				</xs:extension>
			</xs:simpleContent>
		</xs:complexType>
	</xs:element>

	<xs:element name="eval" type="xs:string"/>

	<xs:element name="include" nillable="true">
		<xs:complexType>
			<xs:attribute name="src" type="xs:string" use="required"/>
		</xs:complexType>
	</xs:element>

	<xs:element name="widget">
		<xs:complexType>
			<xs:sequence>
				<xs:element name="create" type="xs:string" minOccurs="0" maxOccurs="unbounded"/>
			</xs:sequence>
			<xs:attribute name="var" type="xs:string" use="required"/>
			<xs:attribute name="type" type="xs:string" use="required"/>
		</xs:complexType>
	</xs:element>

  <xs:element name="for-each">
    <xs:complexType>
      <xs:complexContent>
        <xs:extension base="c:container_element_type">
			    <xs:attribute name="items" type="xs:string"/>
			    <xs:attribute name="item" type="xs:string" default="item"/>
			    <xs:attribute name="key" type="xs:string" default="key"/>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>

	<xs:complexType name="when_type">
    <xs:complexContent>
      <xs:extension base="c:container_element_type">
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  
	<xs:element name="when-true">
		<xs:complexType>
			<xs:complexContent>
				<xs:extension base="t:when_type">
					<xs:attribute name="expr" type="xs:string" use="required"/>
				</xs:extension>
			</xs:complexContent>
		</xs:complexType>
	</xs:element>
  
	<xs:element name="when-false">
		<xs:complexType>
			<xs:complexContent>
				<xs:extension base="t:when_type">
					<xs:attribute name="expr" type="xs:string" use="required"/>
				</xs:extension>
			</xs:complexContent>
		</xs:complexType>
	</xs:element>
  
	<xs:element name="if">
		<xs:complexType>
			<xs:sequence maxOccurs="1">
				<xs:element form="qualified" minOccurs="0" name="when-true" type="t:when_type"/>
				<xs:element form="qualified" minOccurs="0" name="when-false" type="t:when_type"/>
			</xs:sequence>
			<xs:attribute name="expr" type="xs:string" use="required"/>
		</xs:complexType>
	</xs:element>
  
	<xs:element name="variable">
		<xs:complexType>
			<xs:sequence maxOccurs="unbounded">
			</xs:sequence>
			<xs:attribute name="name" type="xs:string" use="required"/>
			<xs:attribute name="expr" type="xs:string" use="required"/>
		</xs:complexType>
	</xs:element>

  <xs:element name="cache">
    <xs:complexType>
      <xs:complexContent>
        <xs:extension base="c:container_element_type">
          <xs:attribute name="id" type="xs:string" use="required"/>
          <xs:attribute name="duration" type="xs:string"/>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>

  <xs:group name="ddt_elements_group">
    <xs:choice>
      <xs:element ref="t:cache" minOccurs="0" maxOccurs="unbounded"/>
      <xs:element ref="t:eval" minOccurs="0" maxOccurs="unbounded"/>
      <xs:element ref="t:for-each" minOccurs="0" maxOccurs="unbounded"/>
      <xs:element ref="t:if" minOccurs="0" maxOccurs="unbounded"/>
      <xs:element ref="t:include" minOccurs="0" maxOccurs="unbounded"/>
      <xs:element ref="t:variable" minOccurs="0" maxOccurs="unbounded"/>
      <xs:element ref="t:when-false" minOccurs="0" maxOccurs="unbounded"/>
      <xs:element ref="t:when-true" minOccurs="0" maxOccurs="unbounded"/>
      <xs:element ref="t:widget" minOccurs="0" maxOccurs="unbounded"/>
    </xs:choice>
  </xs:group>
  
</xs:schema>
