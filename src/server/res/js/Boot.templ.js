//! REPLACE_BY("// Copyright 2015-2018 Claude Petit, licensed under Apache License version 2.0\n", true)
// doodad-js - Object-oriented programming framework
// File: Boot.templ.js - Boot file for client-side pages generated by a template.
// Project home: https://github.com/doodadjs/
// Author: Claude Petit, Quebec city
// Contact: doodadjs [at] gmail.com
// Note: I'm still in alpha-beta stage, so expect to find some bugs or incomplete parts !
// License: Apache V2
//
//	Copyright 2015-2018 Claude Petit
//
//	Licensed under the Apache License, Version 2.0 (the "License");
//	you may not use this file except in compliance with the License.
//	You may obtain a copy of the License at
//
//		http://www.apache.org/licenses/LICENSE-2.0
//
//	Unless required by applicable law or agreed to in writing, software
//	distributed under the License is distributed on an "AS IS" BASIS,
//	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//	See the License for the specific language governing permissions and
//	limitations under the License.
//! END_REPLACE()

(function() {
	"use strict";

	var	__prevOnLoad__ = window.onload;
	window.onload = function windowOnLoad(ev) {
		if (__prevOnLoad__) {
			__prevOnLoad__.call(this, ev);
		};

		const global = window;

		const SECRET = ((typeof Symbol === 'function') ? Symbol() : []);

		const options = /*! INJECT(TO_SOURCE(VAR("options"), 15)) */;

		if (!options.startup) {
			options.startup = {};
		};

		options.startup.secret = SECRET;

		global.createRoot(null, options)
			.then(function(root) {
				const doodad = root.Doodad,
					tools = doodad.Tools,
					modules = doodad.Modules;

				tools.trapUnhandledErrors();

				const toLoad = [
					//! MAP(VAR("modules"), "mod")
						{
							module: /*! INJECT(TO_SOURCE(VAR("mod.module") || null)) */,
							path: /*! INJECT(TO_SOURCE(VAR("mod.path") || null)) */,
							optional: /*! INJECT(TO_SOURCE(VAR("mod.optional") || false)) */,
						}
					//! END_MAP()
				];

				//! IF(VAR("startups"))
					const safeEval = tools.SafeEval;

					toLoad.push(
						{
							module: '@doodad-js/safeeval',
						},
					);

					//! FOR_EACH(VAR("startups"), "expr")
						(function() {
							let listener;
							root.addEventListener('start', listener = function(ev) {
								root.removeEventListener('start', listener);
								const expr = /*! INJECT(TO_SOURCE(VAR("expr"))) */;
								safeEval.eval(expr, {root: root});
							});
						})();
					//! END_FOR()
				//! END_IF()

				if (toLoad.length) {
					return modules.load(toLoad, options);
				};

				return root;
			})
			.then(function(root) {
				const doodad = root.Doodad,
					types = doodad.Types;

				const ev = new types.CustomEvent('start');
				root.dispatchEvent(ev);
			})
			.catch(function(err) {
				if (err && !err.trapped) {
					console.error(err);
					//throw err;
				};
			});
	};
})();